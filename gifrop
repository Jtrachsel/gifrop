#!/bin/bash
#set -e # terminate the script immediately upon errors
scriptName='gifrop'
version='0.0.4'

# this line returns the directory that this script resides in
# it is used to help determine the paths of the R scripts
# they should reside in the same directory as this script
# Will this method be broadly compatible?
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# this sets the execution directory
exdir=$(pwd)



echo "This is $scriptName $version"
echo
echo 'command issued: '
echo "$0 $@"

# echo "$@"

# Default values of arguments
MIN_GENES=4
THREADS=1
FLANKING_DNA=0
PLOTS=1
HELP=0
GET_ISLANDS=0
OTHER_ARGUMENTS=()

# Loop through arguments and process them
# this is a little hairy...
for arg in "$@"
do
    case $arg in
        -h|--help)
        HELP=1
        shift # Remove --initialize from processing
        ;;
        -g|--get_islands)
        GET_ISLANDS=1
        shift # Remove --initialize from processing
        ;;
        -m|--min_genes)
        MIN_GENES="$2"
        shift # Remove argument name from processing
        # shift # Remove argument value from processing
        ;;
        -t|--threads)
        THREADS="$2"
        shift # Remove argument name from processing
        # shift # Remove argument value from processing
        ;;
        -f|--flank_dna)
        FLANKING_DNA="$2"
        shift # Remove argument name from processing
        # shift # Remove argument value from processing
        ;;
        -n|--no_plots)
        PLOTS=0
        shift # Remove argument name from processing
        ;;
        *)
        OTHER_ARGUMENTS+=("$1") # arg values seem to be accumulating in here
        shift # Remove generic argument from processing
        ;;
    esac
done

#debug
# echo "# help: $HELP"
# echo "# min_genes: $MIN_GENES"
# echo "# threads: $THREADS"
# echo "# flank_DNA: $FLANKING_DNA"
# echo "# no_plots: $PLOTS"
# echo "# Other arguments: ${OTHER_ARGUMENTS[*]}"



#########
#help section

# Print usage
usage() {
  echo -n "

Usage:

  ${scriptName} [OPTION]...

This script should be executed from a directory that contains a roary generated
'gene_presence_absence.csv' file and all of the prokka annotated gff files
that were used to run roary.

 Options:
  -h, --help        Display this help and exit
  -t, --threads     Number of threads to use for parallel abricate commands
  -n, --no_plots    Don't generate plots
  -m, --min_genes   Only return islands with greater than this many genes (4)
  -f, --flank_dna   output this many bases of DNA on either side of each island (0)
  -v, --version     Output version information and exit
  --get_islands     Run the main program to extract genomic islands


Example:

gifrop --get_islands --min_genes 5 --threads 16


"
}

if [[ $HELP -eq 1 ]]
 then
     usage
     exit
fi


# check dependencies
# ERR=0
echo "===== Dependencies check ====="
[ -z `which parallel` ]      && echo "parallel      .... not found" && ERR=1 || echo "parallel      .... good"
[ -z `which abricate` ]      && echo "abricate      .... not found" && ERR=1 || echo "abricate      .... good"
[ -z `which Rscript` ]       && echo "Rscript       .... not found" && ERR=1 || echo "Rscript       .... good"
[ -z `which find` ]          && echo "find          .... not found" && ERR=1 || echo "find          .... good"

if [[ $ERR -eq 1 ]]
 then
     echo "Link or install any of the 'not found' programs above"
     exit
fi



# checks for R packages
Rscript "$DIR"/gifrop_R_reqs.R

if [[ "$?" != 0 ]]
  then exit [1];
fi



if [[ $GET_ISLANDS -eq 0 ]]
 then
     echo 'To run the main program, please specify "--get_islands"
     See the help below: '
     usage
     exit
fi



### check for necessary files ###

# look for gene_presence_absence.csv

FILE="$exdir"/gene_presence_absence.csv

if [ -f "$FILE" ]; then
    echo "$FILE exist"
else
    echo "ERROR!!!!!
    $FILE does not exist.
    This script must be executed from a directory containing these files:
     1) gene_presence_absence.csv file generated by roary
     2) all the prokka annotated .gff files used to run roary.
     please run "gifrop -h""
    exit # quit if not found
fi

# check for gff files
GFFS=$(find . -maxdepth 1 -name '*gff' | wc -l)


if [[ $GFFS -eq 0 ]]
 then
     echo 'ERROR!!!!
     No .gff files found.
     This script must be executed from a directory containing these files:
     1) gene_presence_absence.csv file generated by roary
     2) all the prokka annotated .gff files used to run roary.
     please run "gifrop -h"'
     exit
  else
    echo "found $GFFS .gff files"
fi



# done checking reqs? #

# make main output folder
mkdir ./gifrop_out


# to make gffs without sequence data on the backend.

echo "WRANGLING SEQUENCE DATA..."

mkdir ./gifrop_out/sequence_data

echo "making shortened gffs..."
find . -maxdepth 1 -name '*.gff' | parallel "cat {} |grep -v '#' |grep ID= > ./gifrop_out/sequence_data/{.}_short.gff"

# check for empty shortened gff files
# quit if any are found

NUM_EMPTY_SHORT_GFFS=$(find -type f -empty -name '*gff' | wc -l)
EMPTY_SHORT_GFFS=$(find -type f -empty -name '*gff')

if [[ $NUM_EMPTY_SHORT_GFFS -gt 0 ]]
 then
     echo 'ERROR!!!!
     Some of your input files do not contain any annotated genes.
     Check for very small fasta files in your inputs.
     These are the offending files:'
     echo $EMPTY_SHORT_GFFS
     exit
  else
    echo "found $GFFS .gff files"
fi

echo "extracting fastas from prokka gffs..."
find . -maxdepth 1 -name '*.gff' | parallel "sed -n '/##FASTA/,\$p' {} | grep -v '##FASTA' > ./gifrop_out/sequence_data/{.}.fna"

echo "DONE WRANGLING SEQUENCE DATA"

mkdir ./gifrop_out/my_islands

# RUN Island_ID_out.R

echo "EXECUTING Rscript 'gifrop_id.R'"
#Rscript "$DIR"/gifrop_id.R $exdir 2>&1 | tee -a gifrop.log

# this will be the call when i get id to take other args
# arg[1] is working directory
# arg[2] is mingenes
# arg[3] is flanking DNA
Rscript "$DIR"/gifrop_id.R $exdir $MIN_GENES $FLANKING_DNA 2>&1 | tee -a ./gifrop_out/gifrop.log


if [[ "$?" != 0 ]]
  then echo 'gifrop_id.R did not execute correctly. See gifrop.log  TERMINATING';
  exit [1];
fi

echo "DONE EXECUTING 'gifrop_id.R'"


cd ./gifrop_out/my_islands

# split multifasta All_islands into one fasta per island #
awk '/^>/ {F = substr($0,2)".fasta"} {print > F}' All_islands.fasta
rm All_islands.fasta

# run abricate on islands
echo 'RUNNING ABRICATE ON THE ISLANDS'
mkdir abricate

find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db ncbi {} > ./abricate/{.}.ncbi" >> abricate.log 2>&1
find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db vfdb {} > ./abricate/{.}.vfdb" >> abricate.log 2>&1
find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db plasmidfinder {} > ./abricate/{.}.plasmidfinder" >> abricate.log 2>&1
find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db viroseqs {} > ./abricate/{.}.virofinder" >> abricate.log 2>&1
find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db megares2 {} > ./abricate/{.}.megares" >> abricate.log 2>&1

# look for megares database, if found, run abricate with it.
#MEGARES=$(abricate --list |grep megares2 |wc -l)

#if [[ "$MEGARES" == 1 ]]
#  then
#  echo 'MEGARes database found for abricate'
#  find . -maxdepth 1 -name '*.fasta' | parallel "abricate --db megares2 {} > ./abricate/{.}.megares" >> abricate.log 2>&1;
#fi


cd ..

echo 'making figures directory'
mkdir figures

###

# run gifrop_info.R

Rscript "$DIR"/gifrop_info.R $exdir 2>&1 | tee -a gifrop.log

if [[ "$?" != 0 ]]
  then echo 'gifrop_info.R did not execute correctly. See gifrop.log  TERMINATING';
  exit [1];
fi

# if requested, make plots

if [[ "$PLOTS" == 1 ]]
  then
  echo 'Making plots...'
  Rscript "$DIR"/gifrop_plots.R $exdir 2>&1 | tee -a gifrop.log
fi

echo 'done!'
